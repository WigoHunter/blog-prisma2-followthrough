### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


"""DateTime"""
scalar DateTime

type Like {
  id: ID!
  post: Post!
  user: User!
}

input LikeCreateManyWithoutLikesInput {
  connect: [LikeWhereUniqueInput!]
  create: [LikeCreateWithoutPostInput!]
}

input LikeCreateOneWithoutLikeInput {
  connect: LikeWhereUniqueInput
  create: LikeCreateWithoutUserInput
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutUserInput!
}

input LikeCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutPostInput!
}

input LikeWhereUniqueInput {
  id: ID
}

type Mutation {
  createDraft(authorEmail: String, content: String, title: String): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  like(authorEmail: String, postID: String): Like!
  publish(id: ID): Post
  signupUser(data: UserCreateInput!): User!
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: ID!
  likes(after: String, before: String, first: Int, last: Int, skip: Int): [Like!]
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutPostInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutLikesInput
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: ID
  likes: LikeCreateManyWithoutLikesInput
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutLikesInput {
  author: UserCreateOneWithoutAuthorInput
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  feed(published: Boolean): [Post!]!
  filterPosts(searchString: String): [Post!]!
  post(where: PostWhereUniqueInput!): Post
  users: [User!]!
}

type User {
  email: String!
  id: ID!
  name: String
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
}

input UserCreateInput {
  email: String!
  id: ID
  like: LikeCreateOneWithoutLikeInput
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutLikeInput
}

input UserCreateWithoutLikeInput {
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  email: String!
  id: ID
  like: LikeCreateOneWithoutLikeInput
  name: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
